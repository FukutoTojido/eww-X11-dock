(defwidget bar []
	(centerbox 	
		:orientation 	"h"
		:vexpand		false
		:valign			"start"
		:class			"bar"
		(left)
		(middle)
	  	(right)))

(defwidget left []
	(box
		:class			"left"
		:orientation	"h"
		:halign			"start"
		:space-evenly	false
		(menu)
		(taskbar)
		(hoverName)
		))

(defwidget menu []
	(eventbox
		:onhover		`eww update onHoverName="Start"`
		:onhoverlost	`eww update onHoverName=""`
		(button
			:class			"menuButton"
			(image
				:path				"/home/try-z/.config/eww/icons/osu.png"
				:image-width		25
				:image-height		25))))


(deflisten allWin :initial `[]`
		`./scripts/windowList`)
	
(deflisten activeWindow	:initial `0x0000000`
		`./scripts/activeWindow`)

(defvar onHoverName "")

(defwidget hoverName []
	(revealer
		:transition			"slideright"
		:reveal				{onHoverName != ""}
		:duration			"200ms"
		:style 				`
			padding: ${onHoverName != "" ? "10px" : "0px"};
		`
		{onHoverName}))

(defwidget middle []
	(box
		:style `
			opacity: 0
		`
		activeWindow))

(defwidget taskbar []
	(box
		:class			"taskbar"
		:halign			"start"
		:space-evenly	false
		:spacing		5
		(for win in allWin
			(eventbox
				:onhover 		`eww update onHoverName="${win.name}"`
				:onhoverlost	`eww update onHoverName=""`
				(button
					:onclick `
						./scripts/toggleWindow.sh ${win.npid}
					`
					:class	{win.pid == activeWindow ? "win active" : "win"}
					:valign	"center"
					:halign	"center"
					:style `
						${win.pid == activeWindow ? "background-color: rgba(76, 86, 106, 0.365);" : ""}
					`
					(box
						:space-evenly	false
						:spacing		0
						(image
							:path				"${win.icon}"
							:image-width		25
							:image-height		25)))))))

(defwidget right []
	(box
		:class			"right"
		:orientation	"h"
		:space-evenly	false
		:halign			"end"
		(timedate)))
  
(defwidget timedate []
	(box 
		:class 			"timedate" 
		:orientation 	"v" 
		:space-evenly 	false 
		:halign 		"end"
		:valign			"center"
	  	(time)
		(date))
)

(defwidget time []
	(box
		:class		"time"
		:halign		"end"
		:space-evenly 	false 
		time))

(defwidget date []
	(box
		:class		"date"
		:halign		"end"
		:space-evenly 	false 
		date))
  
(defpoll time 	
	:interval "1s"
	"date '+%H:%M:%S'")

(defpoll date
	:interval "1s"
	"date '+%B %_d, %Y'")
  
(defwindow bar
	:monitor 0
	:windowtype "dock"
	:geometry (geometry :x "0px"
						:y "0px"
						:width "100%"
						; :height "70px"
						:anchor "top center")
	:reserve (struts :side "top" :distance "75px")
	(bar))